# Generated by Django 3.2.9 on 2022-11-30 00:18

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('Main', '0037_auto_20221129_2058'),
    ]

    operations = [
        migrations.CreateModel(
            name='ShelterAccount',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('city', models.CharField(max_length=200)),
                ('address', models.CharField(blank=True, max_length=200, null=True)),
                ('about', models.TextField(blank=True, max_length=1000, null=True)),
                ('logo', models.FileField(blank=True, null=True, upload_to='static/img/accounts')),
                ('director_name', models.CharField(blank=True, max_length=200, null=True)),
                ('contact', models.CharField(blank=True, max_length=200, null=True)),
                ('requisites', models.CharField(blank=True, max_length=200, null=True)),
                ('social_network', models.CharField(blank=True, max_length=200, null=True)),
                ('number_of_animals', models.IntegerField(default=0)),
                ('date_visits', models.TextField(blank=True, max_length=1000, null=True)),
                ('register', models.CharField(choices=[('Отклонить', 'Отклонить'), ('Принять', 'Принять')], default='Отклонить', max_length=10)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='shelteraccount_requests_created', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('hotReport', models.ManyToManyField(blank=True, null=True, to='Main.ShelterHotReport')),
                ('news', models.ManyToManyField(blank=True, null=True, to='Main.ShelterNews')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='shelteraccount_requests_created', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Личный кабинет приюта',
                'verbose_name_plural': 'Личные кабинеты приютов',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserAccount',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('key', models.CharField(default=uuid.uuid4, max_length=50)),
                ('key_used', models.IntegerField(default=2, max_length=2)),
                ('register_user', models.CharField(choices=[('Отклонить', 'Отклонить'), ('Принять', 'Принять')], default='Отклонить', max_length=10)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='useraccount_requests_created', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('helped_animals', models.ManyToManyField(blank=True, null=True, to='Main.Collection')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='useraccount_requests_created', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Личный кабинет пользователей',
                'verbose_name_plural': 'Личный кабинет пользователя',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.RemoveField(
            model_name='accountshelter',
            name='groups',
        ),
        migrations.RemoveField(
            model_name='accountshelter',
            name='hotReport',
        ),
        migrations.RemoveField(
            model_name='accountshelter',
            name='news',
        ),
        migrations.RemoveField(
            model_name='accountshelter',
            name='user_permissions',
        ),
        migrations.DeleteModel(
            name='AccountUser',
        ),
        migrations.AlterField(
            model_name='collection',
            name='choice_shelter',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='Main.shelteraccount'),
        ),
        migrations.DeleteModel(
            name='AccountShelter',
        ),
    ]
